{"name":"Node-ml","tagline":"A Collection of Machine Learning algorithms built for use with NodeJS","body":"node-ml\r\n=======\r\nActive Development Suspended for now.\r\n\r\nA Collection of Machine Learning algorithms built for use with NodeJS\r\n\r\n[![build status](https://secure.travis-ci.org/miketheprogrammer/node-ml.png)](http://travis-ci.org/miketheprogrammer/node-ml)\r\n\r\nInstallation\r\n========\r\n````javascript\r\nnpm install node-ml\r\n````\r\n\r\nBasic API Knowledge\r\n========\r\n\r\nModels are Instantiated with a TrainingSet as an argument\r\n\r\nModels are trained via .train()\r\n\r\nModels are acted upon by the perceive or predict functions. These functions currently do the same thing, the wording is indicative of the nature of the result, and the action the model has taken on the data.\r\n\r\nModels are designed to be trained at the start of a node instance, not during runtime. \r\n\r\nModels all inherit from EventEmitter\r\n\r\nModels support either Callbacks or Events\r\n\r\ncallbacks are of the structure function( err, result ) \r\n\r\nModels support 3 events : trained, response, error\r\n\r\nCallbacks override Events, if you specify a callback and event will not be received.\r\n\r\n\r\n\r\nThe Single Layer Perceptron\r\n========\r\n\r\nWith the single layer perceptron is it possible to solve Linearly Seperable Problems. This makes the SLP a fast tool for solving\r\nsimple classification problems.\r\n\r\nThe SLP takes as input a list of 1x2 vectors as in\r\n````javascript\r\n[\r\n  [1,1],\r\n  [-1,-1]\r\n]\r\n````\r\nWe must also provide the SLP a list of expected outputs for each vector. Currently the system only supports 1 | -1\r\nThese outputs define the side of the line the elements fall on. It is not important which value you give to which inputs.\r\nJust that these inputs correspond in a linear way to the outputs.\r\n\r\nSo for the above input we prove\r\n````javascript\r\n[\r\n  1,\r\n  -1\r\n]\r\n````\r\n\r\nNow the SLP will solve for where [1,1] === 1 and [-1,-1] === -1\r\n\r\nTraining the SLP\r\n---------------\r\nSingleLayerPerceptron(inputs, outputs, learningRate)\r\n````javascript\r\nslp = new SingleLayerPerceptron(inputs, outputs, 0.001);\r\nslp.train(function(trainedModel) { \r\n    trainedModel.perceive([1,1], function(result) {\r\n      console.log(result);\r\n      //should print out 1\r\n    }); \r\n    trainedModel.perceive([-1,-1], function(result) {\r\n      console.log(result);\r\n      //should print out -1\r\n    });\r\n});\r\n````\r\n\r\nAlso Events are supported\r\n--------------\r\ncurrent events are: trained, response, error\r\n\r\ntrained is fired when a model completes training\r\n\r\nresponse is fired when a model completed a perception or prediction phase\r\n\r\nerror is fired ... well on an error.\r\n\r\n````javascript\r\n    slp = new SingleLayerPerceptron(inputs, outputs, 0.001);\r\n    slp.on('error', function(err) {\r\n        t.same(1,1);\r\n    });\r\n    slp.on('trained', function(trainedModel) {\r\n        t.same(true,(trainedModel != undefined));\r\n\r\n        trainedModel.perceive([1,1]);\r\n        trainedModel.perceive([-1,-1]);\r\n    });\r\n    slp.on('response', function(response) {\r\n        perceivedTestCount -= 1;\r\n        var result = response.out;\r\n        var input = response.in;\r\n        var expectedIndex;\r\n        for (var i in perceivedTestInput ) {\r\n            if (perceivedTestInput[i].toString() == input.toString())\r\n                expectedIndex = i;\r\n            \r\n        }\r\n        var expected = perceivedTestOutput[expectedIndex];\r\n        t.same(expected, result);\r\n\r\n        if (perceivedTestCount == 0 )\r\n            t.end();\r\n        \r\n    });\r\n\r\n    slp.train();\r\n````\r\n\r\nEven Better remember the above trained model is a Line seperating a 2d dimension space from -1 to 1 \r\nWe can input any value in this range and get an output however this limited training set is a bad choice but heres some outputs\r\n\r\nObtained From Running examples/singlelayerperceptron2.js\r\n````javascript\r\nInput: 1,1\r\n1\r\nInput: -1,1\r\n-1\r\nInput: 1,-1\r\n1\r\nInput: -.5,1\r\n1\r\nInput: .5,-1\r\n-1\r\nInput: .2,.45634\r\n1\r\nInput: .2,-.45634\r\n-1\r\nInput: -.4,-.4\r\n-1\r\nInput: -1,-1\r\n-1\r\n````\r\n\r\nThe Multi Layer Perceptron\r\n========\r\nWith the Multi Layer Perceptron it is possible to Classify linearly non seperable data set. Meaning that the data fits to a polynomial function.\r\n\r\nRefer to examples.\r\n\r\nThe Linear Regression Model\r\n========\r\n\r\nWith Linear Regression we can predict outcomes based on an input.\r\n\r\nRefer to examples.\r\n\r\nThe KMeans Classifier\r\n========\r\n\r\nThis implementation of the KMeans classifier is an N-Dimensional\r\nclassification algorithm. It works by:\r\n\r\n1. Generating Random K Centroids.\r\n\r\n2. Assigning a K centroid to a point p in Training set T\r\n   such that the Cost(p) with respect to k is minimized;\r\n   Cost(p) is defined as the distances from P to each K\r\n\r\n3. Move the centroids to the Mean of each cluster assigned to them\r\n\r\n4. Repeat until movement no longer occurs.\r\n\r\nRefer to examples for Usage:\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}